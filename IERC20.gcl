contract IERC20 {
    interface ERC20Interface {

        // Returns the name of the token - e.g. "MyToken".
        @global function string name();

        // Returns the symbol of the token. E.g. “HIX”.
        @global function string symbol();

        // Returns the number of decimals the token uses - e.g. 8, means to divide the token amount by 100000000 to 
        // get its user representation.
        @global function uint8 decimals();

        // Returns the total token supply.
        @global function bigint totalSupply();

        // Returns the account balance of another account with address _owner.
        @address function bigint balanceOf();

        // Transfers _value amount of tokens to address _to, and MUST fire the Transfer event. 
        // The function SHOULD throw if the message caller’s account balance does not have enough tokens to spend.
        @address function transfer(address to, bigint value);

        // Transfers _value amount of tokens from address _from to address _to, and MUST fire the Transfer event.
        // The transferFrom method is used for a withdraw workflow, allowing contracts to transfer tokens on your behalf. 
        // This can be used for example to allow a contract to transfer tokens on your behalf and/or to charge fees in sub-currencies. 
        // The function SHOULD throw unless the _from account has deliberately authorized the sender of the message via some mechanism.
        @address function transferFrom(address from, address to, bigint value);
        
        // Allows _spender to withdraw from your account multiple times, up to the _value amount. 
        // If this function is called again it overwrites the current allowance with _value.
        @address function approve(address spender, bigint value);

        // Returns the amount which _spender is still allowed to withdraw from _owner.
        @address function bigint allowance(address spender);

    }
}